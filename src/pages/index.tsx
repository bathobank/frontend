import { Box, Stack } from "@mui/material";
import Link from "next/link";
import { useCallback, useEffect, useState } from "react";

import { TPageProp } from "@/@types/page-prop";
import { GlobalLayout } from "@/components/layouts/GlobalLayout";
import { AlertNotification } from "@/components/modals/AlertNotification";
import { BankList } from "@/components/pages/Index/BankList";
import { GameGroup } from "@/components/pages/Index/GameGroup";
import { GameList } from "@/components/pages/Index/GameList";
import { History } from "@/components/pages/Index/History";
import { TopWeek } from "@/components/pages/Index/TopWeekAndRule/TopWeek";
import { Card } from "@/components/ui/Card";
import { DangerAlert } from "@/components/ui/DangerAlert";
import { DangerButton } from "@/components/ui/DangerButton";
import { InfoButton } from "@/components/ui/InfoButton";
import { SuccessButton } from "@/components/ui/SuccessButton";
import { WarningAlert } from "@/components/ui/WarningAlert";
import { WarningButton } from "@/components/ui/WarningButton";
import { serverSideGetSystemSetting } from "@/hooks/serverSideGetSystemSetting";
import { useSystemSetting } from "@/hooks/useSystemSetting";
import { useUser } from "@/hooks/useUser";
import { useUserHistories } from "@/queries/histories";
import { useHistoryWin } from "@/queries/histories/win";

export default function Home({ systemSettings, user }: TPageProp) {
  useSystemSetting(systemSettings);
  useUser(user);

  const [isOpenModalNotif, setOpenModalNotif] = useState<boolean>(false);
  const historyQuery = useUserHistories(20);
  const historyWin = useHistoryWin();

  const openModalNotification = useCallback(() => {
    if (systemSettings.notification !== "") {
      setTimeout(() => {
        setOpenModalNotif(true);
      }, 10);
    }
  }, [systemSettings.notification]);

  useEffect(() => {
    openModalNotification();
  }, [openModalNotification]);

  return (
    <>
      <GlobalLayout>
        <GameList />
        <Stack
          gap={1}
          direction="row"
          m="auto"
          flexWrap="wrap"
          justifyContent="center"
        >
          <Link href="/gift-code">
            <DangerButton>Giftcode</DangerButton>
          </Link>
          <Link href="/daily-mission">
            <DangerButton>Nhi·ªám v·ª• ng√†y</DangerButton>
          </Link>
          <DangerButton disabled={true}>K√™nh ph√°t code</DangerButton>
        </Stack>
        <Stack
          gap={1}
          direction="row"
          m="auto"
          flexWrap="wrap"
          justifyContent="center"
        >
          <SuccessButton onClick={() => openModalNotification()}>
            TH√îNG B√ÅO
          </SuccessButton>
          <InfoButton>BOX TELEGRAM</InfoButton>
          <WarningButton>H∆∞·ªõng D·∫´n</WarningButton>
        </Stack>
        <Card title="C√ÅCH CH∆†I">
          <Stack gap={2}>
            <WarningAlert>
              <b>Ch√∫ √Ω üîû: Vui l√≤ng ƒë·ªçc k·ªπ QUY ƒê·ªäNH tr∆∞·ªõc khi ch∆°i!</b>
            </WarningAlert>
            <Box>
              <p>Chuy·ªÉn ti·ªÅn v√†o 1 trong c√°c t√†i kho·∫£n ng√¢n h√†ng sau:</p>
              <BankList />
            </Box>
            <Box>
              <p>N·ªôi dung chuy·ªÉn:</p>
              <GameGroup />
            </Box>
            <Box>
              <DangerAlert className="flex flex-col gap-[.5rem]">
                <p>
                  N√™n chuy·ªÉn c√πng ng√¢n h√†ng ƒë·ªÉ ƒë∆∞·ª£c x·ª© l√Ω nhanh nh·∫•t, kh√°c ng√¢n
                  h√†ng c√≥ nguy c∆° kh√¥ng ƒë∆∞·ª£c tr·∫£ th∆∞·ªüng
                </p>
                <p>
                  D√πng ng√¢n h√†ng kh√°c chuy·ªÉn ƒë·∫øn VCB s·∫Ω t√≠nh s·ªë giao d·ªãch c·ªßa
                  VCB
                </p>
                <p>
                  Vui l√≤ng chuy·ªÉn ƒë√∫ng n·ªôi dung, Sai n·ªôi dung s·∫Ω kh√¥ng ƒë∆∞·ª£c ho√†n
                  ti·ªÅn.
                </p>
                <Stack
                  direction="row"
                  justifyContent="center"
                  alignItems="center"
                  gap={1}
                >
                  <SuccessButton className="btn-ui-sm !font-bold">
                    Ti·ªÅn nh·∫≠n
                  </SuccessButton>
                  <b>=</b>
                  <DangerButton className="btn-ui-sm !font-bold">
                    Ti·ªÅn c∆∞·ª£c
                  </DangerButton>
                  <b>X</b>
                  <DangerButton className="btn-ui-sm !font-bold">
                    T·ªâ l·ªá
                  </DangerButton>
                </Stack>
              </DangerAlert>
            </Box>
          </Stack>
        </Card>
        <History title="L·ªäCH S·ª¨ CH∆†I C·ª¶A B·∫†N" historyQuery={historyQuery} />
        <History
          title="L·ªäCH S·ª¨ TH·∫ÆNG"
          historyQuery={historyWin}
          isPersonal={false}
        />
        <TopWeek />
      </GlobalLayout>
      <AlertNotification
        isOpen={isOpenModalNotif}
        onClose={() => {
          setOpenModalNotif(false);
        }}
      />
    </>
  );
}

export const getServerSideProps = serverSideGetSystemSetting;
